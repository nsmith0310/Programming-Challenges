class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        
        lim1 = len(obstacleGrid)
        lim2 = len(obstacleGrid[0])
        
        dp = [[0 for j in range(0,lim2)] for i in range(0,lim1)]
        
        
                
        if obstacleGrid[0][0]==1:return 0
        def r(val):
            if dp[val[0]][val[1]]!=0:
                return dp[val[0]][val[1]]
            if val==[lim1-1,lim2-1]:
                if obstacleGrid[val[0]][val[1]]!=1:
                    return 1
                else:
                    return 0
            c = 0
            tmp = []
            
            if val[0]<lim1-1:
                if obstacleGrid[val[0]+1][val[1]]!=1:
                    tmp.append([val[0]+1,val[1]])
            if val[1]<lim2-1:
                if obstacleGrid[val[0]][val[1]+1]!=1:
                    tmp.append([val[0],val[1]+1])
            
            for x in tmp:
                c+=r(x)
                
            dp[val[0]][val[1]]=c
            return c
        
        return (r([0,0]))
                
            