from functools import lru_cache
class Solution:
    def stoneGameIII(self, stoneValue: List[int]) -> str:
        
        lim = len(stoneValue)
        
        @lru_cache(None)
        def r(p,idx):
            if p==0:
                tmp = []
                for i in range(1,4):
                    if idx+1<=lim:
                        tmp.append(sum(stoneValue[idx:min(idx+i,lim)])+r(1,idx+i))
                        
                        
                    else:
                        tmp.append(0)
                     
                return max(tmp)
            else:
                tmp = []
                for i in range(1,4):
                    if idx+1<=lim:
                        tmp.append(-sum(stoneValue[idx:min(idx+i,lim)])+r(0,idx+i))
                    else:
                        tmp.append(0)
                        
                return min(tmp)
            
        val = r(0,0)
        ###print(val)
        if val>0:return 'Alice'
        if val<0:return 'Bob'
        return 'Tie'
            