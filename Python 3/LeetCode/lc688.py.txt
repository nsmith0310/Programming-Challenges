class Solution:
    def knightProbability(self, N: int, K: int, r: int, c: int) -> float:
        
        if K==0:return 1
        arr = [[0 for i in range(0,N)] for j in range(0,N)]
        d = dict()
        d2 = dict()
        for i in range(0,N):
            for j in range(0,N):
                x = [i,j]
                val = str(i)+'.'+str(j)
                d[val]=[]
                v = 0
                val1 = [x[0]-2,x[1]-1]                
                val2 = [x[0]-2,x[1]+1]                
                val3 = [x[0]-1,x[1]+2]                
                val4 = [x[0]+1,x[1]+2]               
                val5 = [x[0]+2,x[1]+1]                
                val6 = [x[0]+2,x[1]-1]                
                val7 = [x[0]+1,x[1]-2]                
                val8 = [x[0]-1,x[1]-2]
                if val1[0]>=0 and val1[0]<N and val1[1]>=0 and val1[1]<N:
                    v+=1
                    d[val].append(val1)
                if val2[0]>=0 and val2[0]<N and val2[1]>=0 and val2[1]<N:
                    v+=1
                    d[val].append(val2)
                if val3[0]>=0 and val3[0]<N and val3[1]>=0 and val3[1]<N:
                    v+=1
                    d[val].append(val3)
                if val4[0]>=0 and val4[0]<N and val4[1]>=0 and val4[1]<N:
                    v+=1
                    d[val].append(val4)
                if val5[0]>=0 and val5[0]<N and val5[1]>=0 and val5[1]<N:
                    v+=1
                    d[val].append(val5)
                if val6[0]>=0 and val6[0]<N and val6[1]>=0 and val6[1]<N:
                    v+=1
                    d[val].append(val6)
                if val7[0]>=0 and val7[0]<N and val7[1]>=0 and val7[1]<N:
                    v+=1
                    d[val].append(val7)
                if val8[0]>=0 and val8[0]<N and val8[1]>=0 and val8[1]<N:
                    v+=1
                    d[val].append(val8)
                    
                arr[i][j]=v
                d2[val]=[0 for j in range(0,K)]
        
        
        def ret(coor,n):
            val = str(coor[0])+'.'+str(coor[1])
            if d2[val][n]!=0:return d2[val][n]
            t=0
             
            tmp = d[val]
            
            if n==K-1: 
                d2[val][n] = arr[coor[0]][coor[1]] 
                return arr[coor[0]][coor[1]]
                    
            for x in tmp:
                m = ret(x,n+1)
                t+=m
                d2[str(x[0])+'.'+str(x[1])][n] = m
            d2[val][n] = t
            return t
        
        x = (ret([r,c],0))/(8**K)
        
        return x
                
                
                
                
                
                
                
                
                
                
                
                
        