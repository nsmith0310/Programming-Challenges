class Solution:
    def possibleBipartition(self, N: int, dislikes: List[List[int]]) -> bool:
        
        
        arr = [0]*N
        
        d = dict()
        
        for x in dislikes:
            
            try:
                d[x[0]].append(x[1])
            except:
                d[x[0]]=[x[1]]
            
                
              
        s1 = set()
        s2 = set()
        
        for x in d:
            cov = set(d[x])
            s3 = set()
            s3.add(x)
            tmp = d[x]
            s4 = set(tmp)
            cov.add(x)
           
            p = 0
            while 1!=-1:
                tmp2 = []
                for y in tmp:
                    try:
                        tmp2+=d[y]
                    except:
                        pass
                    
                if tmp2==[]:
                    break
                else:
                    if p==0:
                        for z in tmp2:
                            s3.add(z)
                        p = 1
                    else:
                        for z in tmp2:
                            s4.add(z)
                        p = 0
                tmp = []
                for z in tmp2:
                    if z not in cov:
                        tmp.append(z)
                        cov.add(z)
            
            
            if s3-(s3-s4)!=set():return False
            
        return True
            
            
            
            
       
            
            
            
            
            
            
            
            


